# -*- coding: utf-8 -*-
"""customer_sale.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1Hw0TvwEpOmNN8CAt2-SDegC9q6EaU_K6

Anda dapat menyambungkan Google Drive Anda ke Google Colab untuk mengakses file Anda.

Jalankan kode berikut di sel kode baru:
"""

from google.colab import drive
drive.mount('/content/drive')

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns

data = pd.read_csv('/content/drive/MyDrive/customer_sale.csv')
print(data.head())

"""# Task
Lakukan pembersihan data pada dataframe yang sudah dimuat di Google Colab.

## Periksa informasi data

### Subtask:
Periksa tipe data, nilai non-null, dan penggunaan memori.

**Reasoning**:
Display the summary information of the dataframe including data types, non-null values, and memory usage.
"""

data.info()

"""## Periksa nilai yang hilang

### Subtask:
Identifikasi kolom dengan nilai yang hilang dan jumlahnya.

**Reasoning**:
Identify columns with missing values and their counts using the isnull() and sum() methods.
"""

missing_values = data.isnull().sum()
display(missing_values)

"""## Tangani nilai yang hilang

### Subtask:
Tentukan strategi untuk menangani nilai yang hilang (misalnya, menghapus baris/kolom, mengisi dengan nilai tertentu).

## Periksa duplikat

### Subtask:
Identifikasi dan tangani baris duplikat.

**Reasoning**:
Check for duplicate rows and remove them if they exist. Then verify the removal.
"""

print(f"Jumlah baris sebelum menghapus duplikat: {len(data)}")
data.drop_duplicates(inplace=True)
print(f"Jumlah baris setelah menghapus duplikat: {len(data)}")

"""## Periksa tipe data

### Subtask:
Pastikan tipe data sudah benar untuk setiap kolom. Konversi jika diperlukan.

**Reasoning**:
Periksa tipe data setiap kolom dan konversi kolom 'Purchase Date' ke tipe datetime.
"""

print("Tipe data sebelum konversi:")
display(data.dtypes)

data['Purchase Date'] = pd.to_datetime(data['Purchase Date'])

print("\nTipe data setelah konversi:")
display(data.dtypes)

"""## Periksa nilai outlier

### Subtask:
Identifikasi dan tangani nilai outlier jika ada.

**Reasoning**:
Create box plots for the numerical columns 'Sale', 'Quantity', and 'Price' to visualize potential outliers.
"""

numerical_cols = ['Sale', 'Quantity', 'Price']
plt.figure(figsize=(15, 5))

for i, col in enumerate(numerical_cols):
    plt.subplot(1, 3, i + 1)
    sns.boxplot(y=data[col])
    plt.title(f'Box plot of {col}')
    plt.ylabel(col)

plt.tight_layout()
plt.show()

"""## Summary:

### Data Analysis Key Findings

*   The dataset contains 1000 entries and 10 columns with a mix of data types including `object`, `float64`, `int64`, and `bool`.
*   There are no missing values in the dataset, as indicated by 1000 non-null values for each column.
*   No duplicate rows were found in the dataset; the row count remained at 1000 after checking for duplicates.
*   The 'Purchase Date' column was successfully converted from the `object` data type to the `datetime64[ns]` data type.
*   Potential outliers were identified in the numerical columns 'Sale', 'Quantity', and 'Price' through the visualization of box plots.

### Insights or Next Steps

*   While no missing values or duplicates were found, potential outliers were identified in key numerical columns. The next step should involve determining an appropriate strategy to handle these outliers to ensure they don't skew further analysis.
*   With the 'Purchase Date' column correctly formatted as a datetime object, temporal analysis based on purchase dates can now be performed.

# Task
Lakukan analisis data eksplorasi (EDA) pada dataset penjualan. EDA harus mencakup statistik deskriptif, analisis penjualan total per bulan, identifikasi produk teratas, dan segmentasi pelanggan dasar.

## Statistik deskriptif

### Subtask:
Hitung statistik deskriptif untuk kolom numerik dan kategorikal.

**Reasoning**:
Calculate and display descriptive statistics for both numerical and categorical columns in the dataframe.
"""

print("Statistik Deskriptif untuk Kolom Numerik:")
display(data.describe())

print("\nStatistik Deskriptif untuk Kolom Kategorikal:")
display(data.describe(include='object'))

"""## Penjualan total per bulan

### Subtask:
Hitung total penjualan untuk setiap bulan dan visualisasikan.

**Reasoning**:
Group the data by 'Purchase Month', calculate the sum of 'Sale' for each month, print the result, and then create and display a bar plot of the monthly sales.
"""

monthly_sales = data.groupby('Purchase Month')['Sale'].sum()
print("Total Penjualan per Bulan:")
display(monthly_sales)

plt.figure(figsize=(10, 6))
monthly_sales.plot(kind='bar')
plt.title('Total Penjualan per Bulan')
plt.xlabel('Bulan')
plt.ylabel('Total Penjualan')
plt.xticks(rotation=0)
plt.tight_layout()
plt.show()

"""## Produk teratas

### Subtask:
Identifikasi dan visualisasikan produk teratas berdasarkan total penjualan atau kuantitas terjual.

**Reasoning**:
Calculate the total sales for each product category and sort them in descending order.
"""

product_sales = data.groupby('Product Category')['Sale'].sum().sort_values(ascending=False)
print("Total Penjualan per Kategori Produk:")
display(product_sales)

"""**Reasoning**:
Create a bar plot to visualize the total sales per product category.


"""

plt.figure(figsize=(10, 6))
product_sales.plot(kind='bar')
plt.title('Total Penjualan per Kategori Produk')
plt.xlabel('Kategori Produk')
plt.ylabel('Total Penjualan')
plt.xticks(rotation=45, ha='right')
plt.tight_layout()
plt.show()

"""**Reasoning**:
Calculate the total quantity sold for each product category and sort them in descending order.


"""

product_quantity = data.groupby('Product Category')['Quantity'].sum().sort_values(ascending=False)
print("Total Kuantitas Terjual per Kategori Produk:")
display(product_quantity)

"""**Reasoning**:
Create a bar plot to visualize the total quantity sold per product category.


"""

plt.figure(figsize=(10, 6))
product_quantity.plot(kind='bar')
plt.title('Total Kuantitas Terjual per Kategori Produk')
plt.xlabel('Kategori Produk')
plt.ylabel('Total Kuantitas Terjual')
plt.xticks(rotation=45, ha='right')
plt.tight_layout()
plt.show()

"""## Segmentasi pelanggan

### Subtask:
Lakukan analisis dasar untuk mengidentifikasi segmen pelanggan berdasarkan perilaku pembelian.

**Reasoning**:
Calculate the total spending for each customer by grouping by 'Customer Name' and summing the 'Sale' column, then sort the results in descending order and display the top 10.
"""

customer_spending = data.groupby('Customer Name')['Sale'].sum().sort_values(ascending=False)
print("Top 10 Pelanggan Berdasarkan Total Pengeluaran:")
display(customer_spending.head(10))

"""## Summary:

### Data Analysis Key Findings

*   The dataset includes both numerical columns (e.g., `Sale`, `Quantity`, `Price`) and categorical columns (`Customer Name`, `Product Category`).
*   Total sales varied by month, with the specific trend visible in the generated bar plot.
*   'Books' was the top-performing product category based on both total sales and total quantity sold, followed by 'Clothing', 'Electronics', and 'Groceries'.
*   The top 10 customers by total spending were identified, with Derek Wright, Lisa Webb, and Christopher Fry having the highest expenditures.

### Insights or Next Steps

*   Focus marketing and promotional efforts on the 'Books' category to capitalize on its high performance and explore strategies to boost sales in lower-performing categories like 'Groceries'.
*   Implement a customer loyalty program targeting the top-spending customers to encourage repeat purchases and potentially increase their average spending.

"""

import datetime

"""# Task
Lakukan analisis anomali dan customer lifetime value (jika data lengkap) pada data penjualan.

## Analisis anomali

### Subtask:
Identifikasi potensi anomali atau outlier dalam data, terutama pada kolom numerik.

**Reasoning**:
Calculate the Z-score for the numerical columns 'Sale', 'Quantity', and 'Price', then identify and display rows where the absolute Z-score exceeds the threshold of 3, marking them as outliers.
"""

numerical_cols = ['Sale', 'Quantity', 'Price']

for col in numerical_cols:
    data[f'{col}_Zscore'] = (data[col] - data[col].mean()) / data[col].std()

outlier_threshold = 3
data['Is_Outlier'] = (np.abs(data['Sale_Zscore']) > outlier_threshold) | \
                     (np.abs(data['Quantity_Zscore']) > outlier_threshold) | \
                     (np.abs(data['Price_Zscore']) > outlier_threshold)

outliers = data[data['Is_Outlier']]

print("Baris yang teridentifikasi sebagai outlier:")
display(outliers)

"""## Customer lifetime value (clv)

### Subtask:
Jika data memungkinkan (memiliki informasi yang cukup untuk menghitung frekuensi pembelian, nilai pembelian rata-rata, dan umur pelanggan), hitung dan analisis CLV.

**Reasoning**:
Check if the necessary columns for CLV calculation exist and then calculate the purchase frequency, average purchase value, and customer lifespan for each customer. Finally, calculate the basic CLV and display the CLV for the top 10 customers.
"""

required_cols = ['Customer Name', 'Purchase Date', 'Sale']
if all(col in data.columns for col in required_cols):
    print("Dataframe memiliki kolom yang diperlukan untuk menghitung CLV.")

    # Hitung frekuensi pembelian per pelanggan
    customer_frequency = data.groupby('Customer Name').size().rename('Purchase Frequency')

    # Hitung nilai pembelian rata-rata per pelanggan
    customer_avg_sale = data.groupby('Customer Name')['Sale'].mean().rename('Average Purchase Value')

    # Hitung umur pelanggan
    customer_lifespan = data.groupby('Customer Name')['Purchase Date'].agg(['min', 'max'])
    customer_lifespan['Lifespan_Days'] = (customer_lifespan['max'] - customer_lifespan['min']).dt.days

    # Gabungkan hasil
    customer_clv_data = pd.DataFrame({
        'Purchase Frequency': customer_frequency,
        'Average Purchase Value': customer_avg_sale,
        'Lifespan_Days': customer_lifespan['Lifespan_Days']
    })

    # Hitung CLV dasar
    # Handle cases where lifespan is 0 days (single purchase) to avoid division by zero or zero CLV
    # For simplicity in this basic calculation, we'll treat lifespan as 1 day for single purchases
    customer_clv_data['Lifespan_Days'] = customer_clv_data['Lifespan_Days'].replace(0, 1)

    customer_clv_data['CLV'] = customer_clv_data['Average Purchase Value'] * customer_clv_data['Purchase Frequency'] * customer_clv_data['Lifespan_Days']

    # Tampilkan CLV untuk beberapa pelanggan teratas
    print("\nCLV untuk Top 10 Pelanggan:")
    display(customer_clv_data.sort_values(by='CLV', ascending=False).head(10))

else:
    print("Dataframe tidak memiliki kolom yang diperlukan untuk menghitung CLV.")

"""## Summary:

### Data Analysis Key Findings

*   Empat baris diidentifikasi sebagai outlier berdasarkan Z-score pada kolom `Sale`, `Quantity`, atau `Price` dengan threshold 3. Outlier ini didorong terutama oleh nilai `Price` yang tinggi.
*   Data memiliki kolom yang diperlukan (`Customer Name`, `Purchase Date`, `Sale`) untuk menghitung Customer Lifetime Value (CLV).
*   CLV dasar dihitung untuk setiap pelanggan menggunakan formula: CLV = (Nilai Pembelian Rata-rata) \* (Frekuensi Pembelian) \* (Umur Pelanggan dalam Hari).
*   Pelanggan dengan hanya satu pembelian diberi umur 1 hari untuk perhitungan CLV.
*   10 pelanggan teratas berdasarkan nilai CLV mereka berhasil diidentifikasi dan ditampilkan.

### Insights or Next Steps

*   Investigasi lebih lanjut terhadap outlier yang teridentifikasi untuk memahami penyebab nilai yang ekstrem dan menentukan apakah tindakan korektif diperlukan (misalnya, pembersihan data atau analisis terpisah).
*   Gunakan nilai CLV yang dihitung untuk strategi pemasaran yang ditargetkan, program loyalitas, atau identifikasi pelanggan bernilai tinggi.

## Visualisasi Insight

Berdasarkan analisis sebelumnya, kita akan memvisualisasikan wawasan utama untuk pemahaman yang lebih baik.

### Total Penjualan per Bulan

Visualisasi total penjualan untuk setiap bulan.
"""

# Pastikan monthly_sales sudah dihitung dari analisis sebelumnya
# monthly_sales = data.groupby('Purchase Month')['Sale'].sum()

plt.figure(figsize=(10, 6))
monthly_sales.plot(kind='bar')
plt.title('Total Penjualan per Bulan')
plt.xlabel('Bulan')
plt.ylabel('Total Penjualan')
plt.xticks(rotation=0)
plt.tight_layout()
plt.show()

"""### Kinerja Kategori Produk (Penjualan)

Visualisasi total penjualan per kategori produk.
"""

# Pastikan product_sales sudah dihitung dari analisis sebelumnya
# product_sales = data.groupby('Product Category')['Sale'].sum().sort_values(ascending=False)

plt.figure(figsize=(10, 6))
product_sales.plot(kind='bar')
plt.title('Total Penjualan per Kategori Produk')
plt.xlabel('Kategori Produk')
plt.ylabel('Total Penjualan')
plt.xticks(rotation=45, ha='right')
plt.tight_layout()
plt.show()

"""### Kinerja Kategori Produk (Kuantitas Terjual)

Visualisasi total kuantitas terjual per kategori produk.
"""

# Pastikan product_quantity sudah dihitung dari analisis sebelumnya
# product_quantity = data.groupby('Product Category')['Quantity'].sum().sort_values(ascending=False)

plt.figure(figsize=(10, 6))
product_quantity.plot(kind='bar')
plt.title('Total Kuantitas Terjual per Kategori Produk')
plt.xlabel('Kategori Produk')
plt.ylabel('Total Kuantitas Terjual')
plt.xticks(rotation=45, ha='right')
plt.tight_layout()
plt.show()

"""### Top 10 Pelanggan Berdasarkan Total Pengeluaran

Visualisasi 10 pelanggan teratas berdasarkan total pengeluaran mereka.
"""

# Pastikan customer_spending sudah dihitung dari analisis sebelumnya
# customer_spending = data.groupby('Customer Name')['Sale'].sum().sort_values(ascending=False)

plt.figure(figsize=(12, 6))
customer_spending.head(10).plot(kind='bar')
plt.title('Top 10 Pelanggan Berdasarkan Total Pengeluaran')
plt.xlabel('Nama Pelanggan')
plt.ylabel('Total Pengeluaran')
plt.xticks(rotation=45, ha='right')
plt.tight_layout()
plt.show()

"""### Top 10 Pelanggan Berdasarkan CLV

Visualisasi 10 pelanggan teratas berdasarkan nilai CLV mereka.
"""

# Pastikan customer_clv_data sudah dihitung dari analisis sebelumnya
# customer_clv_data sudah berisi kolom 'CLV'

plt.figure(figsize=(12, 6))
customer_clv_data.sort_values(by='CLV', ascending=False).head(10)['CLV'].plot(kind='bar')
plt.title('Top 10 Pelanggan Berdasarkan CLV')
plt.xlabel('Nama Pelanggan')
plt.ylabel('CLV')
plt.xticks(rotation=45, ha='right')
plt.tight_layout()
plt.show()

"""# Task
Export hasil analisis (data tabular dan grafik) ke Google Drive.

## Export data tabular ke csv

### Subtask:
Simpan DataFrame atau Series yang relevan (`monthly_sales`, `product_sales`, `product_quantity`, `customer_spending`, `customer_clv_data`) ke file CSV di Google Drive Anda.

**Reasoning**:
Save the relevant Series and DataFrame to CSV files in Google Drive without including the index.
"""

monthly_sales.to_csv('/content/drive/MyDrive/monthly_sales.csv', index=False)
product_sales.to_csv('/content/drive/MyDrive/product_sales.csv', index=False)
product_quantity.to_csv('/content/drive/MyDrive/product_quantity.csv', index=False)
customer_spending.to_csv('/content/drive/MyDrive/customer_spending.csv', index=False)
customer_clv_data.to_csv('/content/drive/MyDrive/customer_clv_data.csv', index=False)
print("Files saved to Google Drive:")
print("- monthly_sales.csv")
print("- product_sales.csv")
print("- product_quantity.csv")
print("- customer_spending.csv")
print("- customer_clv_data.csv")

"""## Export grafik ke file gambar

### Subtask:
Simpan setiap plot yang telah dibuat sebagai file gambar (misalnya, PNG atau JPEG) di Google Drive Anda.

**Reasoning**:
Save each plot generated in the previous analysis steps as image files to Google Drive.
"""

# Save the monthly sales plot
plt.figure(figsize=(10, 6))
monthly_sales.plot(kind='bar')
plt.title('Total Penjualan per Bulan')
plt.xlabel('Bulan')
plt.ylabel('Total Penjualan')
plt.xticks(rotation=0)
plt.tight_layout()
plt.savefig('/content/drive/MyDrive/monthly_sales_plot.png')
plt.close() # Close the plot to free up memory

# Save the product sales plot
plt.figure(figsize=(10, 6))
product_sales.plot(kind='bar')
plt.title('Total Penjualan per Kategori Produk')
plt.xlabel('Kategori Produk')
plt.ylabel('Total Penjualan')
plt.xticks(rotation=45, ha='right')
plt.tight_layout()
plt.savefig('/content/drive/MyDrive/product_sales_plot.png')
plt.close() # Close the plot

# Save the product quantity plot
plt.figure(figsize=(10, 6))
product_quantity.plot(kind='bar')
plt.title('Total Kuantitas Terjual per Kategori Produk')
plt.xlabel('Kategori Produk')
plt.ylabel('Total Kuantitas Terjual')
plt.xticks(rotation=45, ha='right')
plt.tight_layout()
plt.savefig('/content/drive/MyDrive/product_quantity_plot.png')
plt.close() # Close the plot

# Save the top 10 spending customers plot
plt.figure(figsize=(12, 6))
customer_spending.head(10).plot(kind='bar')
plt.title('Top 10 Pelanggan Berdasarkan Total Pengeluaran')
plt.xlabel('Nama Pelanggan')
plt.ylabel('Total Pengeluaran')
plt.xticks(rotation=45, ha='right')
plt.tight_layout()
plt.savefig('/content/drive/MyDrive/top_10_spending_customers_plot.png')
plt.close() # Close the plot

# Save the top 10 CLV customers plot
plt.figure(figsize=(12, 6))
customer_clv_data.sort_values(by='CLV', ascending=False).head(10)['CLV'].plot(kind='bar')
plt.title('Top 10 Pelanggan Berdasarkan CLV')
plt.xlabel('Nama Pelanggan')
plt.ylabel('CLV')
plt.xticks(rotation=45, ha='right')
plt.tight_layout()
plt.savefig('/content/drive/MyDrive/top_10_clv_customers_plot.png')
plt.close() # Close the plot

print("Plots saved to Google Drive.")

"""## Summary:

### Data Analysis Key Findings

*   Five different data analysis results (monthly sales, product sales, product quantity, customer spending, and customer CLV data) were successfully exported as CSV files to Google Drive.
*   Five different plots (monthly sales, product sales, product quantity, top 10 spending customers, and top 10 CLV customers) were successfully exported as PNG image files to Google Drive.

### Insights or Next Steps

*   These exported files in Google Drive can be easily shared with stakeholders or used for further reporting and presentations.

"""